{"version":3,"sources":["LoadingIcon.js","Filter.js","Job.js","KeywordBar.js","Fetcher.js","App.js","serviceWorker.js","index.js"],"names":["LoadingIcon","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","react_spinners","size","Component","Filter","type","value","props","searchInfo","payRateMin","onChange","name","payRateMax","experienceLevel","jobType","country","languages","Job","renderedOutput","jobs","map","job","i","key","rolename","company","city","rate","experiencelevel","KeywordBar","onSubmit","onClick","keywords","placeholder","src_Job","FetchBar","_this","state","skills","availability","isLoading","handleSearchChange","bind","assertThisInitialized","_this2","setState","APIOverallSkills","forEach","skill","fetch","then","response","json","data","console","log","event","target","toChange","prevState","objectSpread","defineProperty","src_LoadingIcon","src_Filter","src_KeywordBar","fetcher","App","Fetcher","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d18ea2d8.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { css } from 'react-emotion';\r\n// First way to import\r\nimport { ClipLoader } from 'react-spinners';\r\n\r\nclass LoadingIcon extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    render() {\r\n        let rotation = 30;\r\n        return (\r\n            <div\r\n                className=\"LoadingIcon\"\r\n            >\r\n                <ClipLoader\r\n                size={300}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoadingIcon","import React, { Component } from 'react'\r\n\r\nclass Filter extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='TriBlock Filter'>\r\n                    <label>\r\n                        Minimum:\r\n                    </label>\r\n                    <input\r\n                    className=\"MinBar\"\r\n                    type='number'\r\n                    value={this.props.searchInfo.payRateMin}\r\n                    onChange={this.props.onChange}\r\n                    name='payRateMin'\r\n                    >\r\n                    </input>\r\n                    <br/>\r\n                    <label>\r\n                        Maximum:\r\n                    </label>\r\n                    <input\r\n                    className=\"MaxBar\"\r\n                    type='number'\r\n                    value={this.props.searchInfo.payRateMax}\r\n                    onChange={this.props.onChange}\r\n                    name='payRateMax'\r\n                    >\r\n                    </input>\r\n                    <br/>\r\n                    <br/>\r\n                    <label>\r\n                        Experience Level:\r\n                    </label>\r\n                    <select\r\n                    className=\"ExperienceToggle\"\r\n                    type='text'\r\n                    value={this.props.searchInfo.experienceLevel}\r\n                    onChange={this.props.onChange}\r\n                    name='experienceLevel'\r\n                    >\r\n                    <option value=''>Any</option>\r\n                    <option value='Junior'>Junior</option>\r\n                    <option value='Mid'>Mid</option>\r\n                    <option value='Senior'>Senior</option>\r\n                    </select>\r\n                    <br/>\r\n                    <br/>\r\n                    <label>\r\n                        Job Type:\r\n                    </label>\r\n                    <select\r\n                    className=\"TypeToggle\"\r\n                    type='text'\r\n                    value={this.props.searchInfo.jobType}\r\n                    onChange={this.props.onChange}\r\n                    name='jobType'\r\n                    >\r\n                    <option value=''>Any</option>\r\n                    <option value='Hourly'>Hourly</option>\r\n                    <option value='Part-Time'>Part-time</option>\r\n                    <option value='Full-Time(40 hrs/wk)'>Full-time</option>\r\n                    </select>\r\n                    <br/>\r\n                    <br/>\r\n                    <label>\r\n                        Country:\r\n                    </label>\r\n                    <input\r\n                    className=\"CountrySearch\"\r\n                    type='text'\r\n                    value={this.props.searchInfo.country}\r\n                    onChange={this.props.onChange}\r\n                    name='country'\r\n                    >\r\n                    </input>\r\n                    <br/>\r\n                    <br/>\r\n                    <label>\r\n                        Language:\r\n                    </label>\r\n                    <input\r\n                    className=\"LanguageSearch\"\r\n                    type='text'\r\n                    value={this.props.searchInfo.languages}\r\n                    onChange={this.props.onChange}\r\n                    name='languages'\r\n                    >\r\n                    </input>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Filter","import React, { Component } from 'react'\r\n\r\nclass Job extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    render() {\r\n        let renderedOutput = this.props.jobs.map((job, i) =>\r\n            <div key={i} className='Jobs'>\r\n                <div>\r\n                    Job Title: {job.rolename}\r\n                </div>\r\n                <div>\r\n                    Company: {job.company}\r\n                </div>\r\n                <div>\r\n                    City: {job.city}\r\n                </div>\r\n                <div>\r\n                    Wage: ${job.rate}/HR\r\n                </div>\r\n                <div>\r\n                    Duration: {job.type}\r\n                </div>\r\n                <div>\r\n                    Experience: {job.experiencelevel}\r\n                </div>\r\n            </div>\r\n        );\r\n        return (\r\n            <div\r\n                className=\"Job\"\r\n            >\r\n                {renderedOutput}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Job","import React, { Component } from 'react'\r\nimport Job from './Job';\r\n\r\nclass KeywordBar extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='TriBlock'>\r\n                    <form onSubmit={this.props.onClick}>\r\n                        <input\r\n                            className=\"SearchBar\"\r\n                            type='text'\r\n                            value={this.props.searchInfo.keywords}\r\n                            onChange={this.props.onChange}\r\n                            placeholder='Enter Keywords here'\r\n                            name='keywords'\r\n                        >\r\n                        </input>\r\n                        <input\r\n                            onClick={this.props.onClick}\r\n                            className=\"FetchButton\"\r\n                            type='submit'\r\n                        >\r\n                        </input>\r\n                    </form>\r\n                    <br/>\r\n                    <div>\r\n                        <Job jobs={this.props.jobs}></Job>\r\n                    </div>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default KeywordBar","import React, { Component } from 'react'\r\nimport LoadingIcon from './LoadingIcon';\r\nimport Filter from './Filter'\r\nimport KeywordBar from './KeywordBar';\r\n\r\nconst APIKeywords = 'https://hubstaffapi.herokuapp.com/jobs?keywords='\r\nconst APISkills = '&skills='\r\nconst APIAvailability = '&availability='\r\nconst APIJobType = '&jobType='\r\nconst APIPayRate = '&payRate='\r\nconst APIExperienceLevel = '&experienceLevel='\r\nconst APICountry = '&country='\r\nconst APILanguages = '&languages=';\r\n\r\nclass FetchBar extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            jobs: [],\r\n            searchInfo: {\r\n                keywords: '',\r\n                skills: [],\r\n                availability: '',\r\n                jobType: '',\r\n                payRateMin: '0',\r\n                payRateMax: '40',\r\n                experienceLevel: '',\r\n                country: '',\r\n                languages: ''\r\n            },\r\n            isLoading: false,\r\n        }\r\n        this.handleSearchChange = this.handleSearchChange.bind(this);\r\n    }\r\n\r\n    fetcher() {\r\n        this.setState({ isLoading: true }, function () {\r\n        });\r\n        let APIOverallSkills = '';\r\n        this.state.searchInfo.skills.forEach(function(skill){\r\n            APIOverallSkills=APIOverallSkills+APISkills+skill;\r\n        });\r\n        fetch(\r\n            APIKeywords + this.state.searchInfo.keywords + APISkills + this.state.searchInfo.skills + APIAvailability + this.state.searchInfo.availability + APIJobType + this.state.searchInfo.jobType + APIPayRate + this.state.searchInfo.payRateMin + ',' + this.state.searchInfo.payRateMax + APIExperienceLevel + this.state.searchInfo.experienceLevel + APICountry + this.state.searchInfo.country + APILanguages + this.state.searchInfo.languages\r\n        ).then(response => { return response.json(); }).then(data => {\r\n            this.setState({ jobs: data, isLoading: false });\r\n            console.log(this.state.jobs);\r\n        });\r\n    }\r\n\r\n    handleSearchChange(event) {\r\n        let value = event.target.value;\r\n        let toChange = event.target.name;\r\n        console.log(toChange);\r\n        this.setState(prevState => ({\r\n            searchInfo: {\r\n                ...prevState.searchInfo,\r\n                [toChange]: value\r\n            }\r\n        }))\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isLoading) {\r\n            return (\r\n                <LoadingIcon/>\r\n            )\r\n        }\r\n        return (\r\n            <div>\r\n                <Filter \r\n                searchInfo={this.state.searchInfo}\r\n                onChange={this.handleSearchChange}\r\n                />\r\n                <KeywordBar\r\n                searchInfo={this.state.searchInfo}\r\n                onChange={this.handleSearchChange}\r\n                onClick={this.fetcher.bind(this)}\r\n                jobs={this.state.jobs}\r\n                />\r\n                <div className='TriBlock'>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FetchBar","import React, { Component } from 'react';\nimport './App.css';\nimport FetchBar from './Fetcher';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <FetchBar/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}